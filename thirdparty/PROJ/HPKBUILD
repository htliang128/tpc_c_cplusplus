# Copyright (c) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Contributor: Jeff Han <hanjinfei@foxmail.com>
# Maintainer: Jeff Han <hanjinfei@foxmail.com>

pkgname=PROJ
pkgver=9.4.1
pkgrel=0
pkgdesc="PROJ is a general purpose coordinate conversion software that can convert coordinates from one coordinate reference system (CRS) to another"
url="https://github.com/OSGeo/PROJ"
archs=("arm64-v8a")
license=("MIT License")
depends=("sqlite" "tiff" "curl" "openssl")

source="https://github.com/OSGeo/$pkgname/archive/refs/tags/$pkgver.tar.gz"

# 需要依赖sqlite3 linux编译
# 因为在编译PROJ的过程中会执行sqlite3程序创建proj.db数据库进行使用，而鸿蒙化后的sqlite3程序版本在linux环境不能运行
sqlitepkgname=sqlite
sqlitebuildhostflag=true
sqlitepkgver=version-3.46.0
sqlitesource="https://github.com/$sqlitepkgname/$sqlitepkgname/archive/refs/tags/$sqlitepkgver.tar.gz"
sqlitebuilddir=$sqlitepkgname-${sqlitepkgver}
sqlitepackagename=$sqlitebuilddir.tar.gz

autounpack=true
downloadpackage=true
buildtools="cmake"
buildlinux=true

builddir=$pkgname-${pkgver}
packagename=$builddir.tar.gz

# 下载sqlite
downloadsqlite() {
    if [ ! -s $sqlitepackagename ];then
        curl -f -L -- $sqlitesource > $sqlitepackagename
        if [ "$?" != "0" ];then
            echo "download $sqlitebuilddir fail"
            return 1
        fi
    fi
    echo "a9575b5b545a0fd9261651b862e1f4649da2644492723510aeeb5cfca33a8baad98349f9626dc985b21e2d081149af2f7d8f7421a5a766fd7dae4c24ed544848  sqlite-version-3.46.0.tar.gz" > sqlitesha512sum
    sha512sum -c sqlitesha512sum
    ret=$?
    if [ $ret -ne 0 ];then
        echo "请检查$sqlitepackagename文件, 并重新下载压缩包."
        return 2
    fi
    rm -rf sqlitesha512sum
    tar -xvf $sqlitepackagename > /dev/null 2>&1
    return 0
}

# 编译sqlite
buildsqlite() {
    cd $sqlitebuilddir
    ./configure >  $buildlog 2>&1
    make >>  $buildlog 2>&1
    cd $OLDPWD
    return 0
}

prepare() {
    if $buildlinux
    then
        downloadsqlite
        ret=$?
        if [ "$ret" != "0" ];then
            return $ret
        fi
        buildsqlite
        ret=$?
        if [ "$ret" != "0" ];then
            return $ret
        fi
        buildlinux=false
    fi
    mkdir -p $builddir/$ARCH-build
}

build() {
    cd $builddir
    ${OHOS_SDK}/native/build-tools/cmake/bin/cmake "$@" \
    -DEXE_SQLITE3=$LYCIUM_ROOT/../thirdparty/PROJ/$sqlitebuilddir/sqlite3 \
    -DOPENSSL_INCLUDE_DIR=$LYCIUM_ROOT/usr/openssl/${ARCH}/include \
    -DOPENSSL_SSL_LIBRARY=$LYCIUM_ROOT/usr/openssl/${ARCH}/lib \
    -DCMAKE_PREFIX_PATH=${LYCIUM_ROOT}/usr/tiff/${ARCH} \
    -B$ARCH-build -S./ -L >> $buildlog 2>&1
    ret=$?
    if [ $ret -ne 0 ]; then
        echo "CMake failed. Check $buildlog for details." >> $buildlog 2>&1
        return 1
    fi
    $MAKE VERBOSE=1 -C $ARCH-build >> $buildlog 2>&1
    ret=$?
    cd $OLDPWD
    return $ret
}

package() {
    cd $builddir
    $MAKE -C $ARCH-build install >>  $buildlog 2>&1
    cd $OLDPWD
}

check() {
    echo "The test must be on an OpenHarmony device!"
}

# 清理环境
cleanbuild(){
    rm -rf ${PWD}/$builddir #${PWD}/$packagename
}